---
title: "Modeling Note"
date: now
author: "Yuta Nakajima"
description: "<BR>This is a modeling note for analysis workflows."
title-block-banner: true
format:
  html:
    theme: 
      light: flatly
      dark: darkly    
    fontsize: 1.0em
    self-contained: true
    toc: true
    toc-location: left
    number-sections: true
    number-depth: 3
    code-fold: true
    grid:
      sidebar-width: 200px
      body-width: 1000px
      margin-width: 200px
      gutter-width: 2.5rem
execute:
  warning: false
editor: 
  markdown: 
    wrap: 72
---

# Problem

Clear statements of a problem to solve.

We need a description that configures the set of analysis codes or tools
that calcurate the deltaV and fuelMass.



# Idea

![IMCE Process Concept](./img/image-1.png){#fig-01}

# Other Interesting Solutions

[Covalent](https://docs.covalent.xyz/docs/get-started/quick-start) is a workflow orchestration platform specifically designed for research and development with custom high-performance computing requirements. Covalent is a unified compute framework that enables users to manage, orchestrate, and execute tasks in any cloud, on-premises or hybrid configuration - entirely in Python.

A workflow is described in set of functions in python.

![covalent](img/image.png) {#fig-02}


Then, workflow is visualized in web based apps which is automatically generated by `Covalent`.

![covalent flow](img/image-2.png) {#fig-03}

A workflow visualization also has a capability similar to property sheets in oml-vision.

![covalent property sheet](img/image-3.png) {#fig-04}



# Orbital Analysis Integrations

The goal of this branch is to demonstrate the integration of the
mathematical analysis with the OML descriptive model by using the COTS
python orbital dynamics tools.

## Here is a minimum set of state variables

```{mermaid}
flowchart LR
    id1((deltaV)) -- affects --> id2((fuelMass))
    id3((initialOrbit)) -- affects --> id1
    id4((targetOrbit)) -- affects --> id1
    id5((Isp)) -- affects --> id2
    id6((dryMass)) -- affects--> id2
    id7((subsystem1-Mass)) -- affects--> id6
    id8((subsystem2-Mass)) -- affects--> id6
    id9((subsystemN-Mass)) -- affects--> id6
    id10[python:deltaV] -- analyzes --> id1
    id11[python:rocketEquation] -- analyzes --> id2
    id12[R:massRollup] -- analyzes --> id6


```

### Circles refer to the state variables

### Squares refer to the analysis vocab

## analysis:Characterizes

We need a description that configures the set of analysis codes or tools
that calcurate the deltaV and fuelMass.

# Proposed Workflow

1.  Specifies the Analysis Configurations.
    -   Query the configuration of the spacecraft.
    -   Query the configuration of the analysis tools.
    -   Query the state variables in terms of goals
2.  Run Simulations
    -   track the status of pipeline flows
    -   dashboard of simulation parameters
    -   dashboard of simulation results
3.  Reflect simulation results to the oml model
    -   update state variables

# Step

1.  First, without scenario to simplify the sa vocabularies.

2.  Modeling state variables

3.  Build actual workflow using quarto.

    -   case-A: Using astropy to calcurate dV and fuelMass.
    -   case-B: Using R to calcurate dV and fuelMass.

4.  



## Get edges

```sparql
PREFIX base:        <http://imce.jpl.nasa.gov/foundation/base#>
PREFIX mission:     <http://imce.jpl.nasa.gov/foundation/mission#>
PREFIX project:     <http://imce.jpl.nasa.gov/foundation/project#>
PREFIX rdfs:        <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT  ?dIri_localname ?dIri ?if1 ?if2 ?from ?to
WHERE {

	?dIri a project:Deliverable ;
      project:isDeliveredBy ?if1 ;
      project:isReceivedBy ?if2 .
      OPTIONAL{
        ?if1 project:isInterchangePointFor ?c1.
      }
      OPTIONAL{
        ?if2 project:isInterchangePointFor ?c2.
      }

  BIND(STRAFTER(STR(?dIri), "#") AS ?dIri_localname) .
  BIND(STRAFTER(STR(?c1), "#") AS ?from) .
  BIND(STRAFTER(STR(?c2), "#") AS ?to) .

}
ORDER BY ?j1

```