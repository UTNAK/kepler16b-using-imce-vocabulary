---
title: "Prototype for integration of descriptive and analysis model"
date: now
date-format: "MMM D, YYYY, HH:mm:ss"
author: "Yuta Nakajima"
description: "<BR>This notebook shows the orbiter configuration queried from OML and some diagrams queried from MMS."
title-block-banner: true
format:
  html:
    theme: 
      light: flatly
      dark: darkly    
    fontsize: 1.0em
    self-contained: true
    toc: true
    toc-location: left
    number-sections: true
    number-depth: 3
    code-fold: true
    grid:
      sidebar-width: 200px
      body-width: 1000px
      margin-width: 200px
      gutter-width: 2.5rem
execute:
  warning: false
editor: 
  markdown: 
    wrap: 72
---

# Workflow

```{mermaid}
  graph LR;
      M[OML]-->S[SPARQL];
      S-->API;
      API-->P[Python];
      P-->O[Oml2Owl];
      API-->MATLAB;
      MATLAB-->O;
      API-->MODELICA;
      MODELICA-->O;
      O-->M;
```

This prototype uses a Quarto notebook to orchestrate the different model authorities.
Jupyter or Quarto notebook perform the execution of codes. Quarto has a
function to execute Python and R together. We can bind the data from
Python to R using the [reticulate
package](https://public.deq.virginia.gov/WPS/R/reticulate.pdf).



## load utility files

```{r}
#| warning: false
library(reactable)
library(stringr)

searchDirectory <- function(iteration, pattern, parent_directory){
  for(i in 1:iteration){
      path <- list.files(parent_directory, recursive = TRUE, pattern = pattern, full.names = TRUE)
      if(length(path)){
        return(path)
      }
      parent_directory <- dirname(parent_directory)
  }
  print("file not found")
  return(path)
}

source(searchDirectory(4, "osr_common.R", (getwd())))
source(searchDirectory(4, "massRollupKepler16b.R", (getwd())))
```

```{r}
library(reticulate)
use_condaenv("py39")
```

## Build and Run a Fuseki SPARQL endpoint for oml model query
<!-- This runs build and load gradle tasks.  Can be run with OML Vision -->

## Get Configuration & Mass Properties
```{r}
library(tansakusuR)
endpoint_url <- "http://localhost:3030/tutorial2/sparql"

configuration_root_iri <- "http://example.com/tutorial2/description/components#orbiter-spacecraft"
```

### SPARQL CODE

```{r}
query_string <- '
PREFIX mission:     <http://imce.jpl.nasa.gov/foundation/mission#>
PREFIX base:        <http://imce.jpl.nasa.gov/foundation/base#>
PREFIX project:     <http://imce.jpl.nasa.gov/foundation/project#>
PREFIX vim4:		<http://bipm.org/jcgm/vim4#>

SELECT DISTINCT ?c1 ?c1_instancename ?c1_id ?c1_name ?c1_mass ?c2 ?c2_instancename ?c2_id ?c2_name ?c2_mass ?c3 ?c3_instancename ?c3_id ?c3_name ?c4
WHERE {

  VALUES ?c1 { <$configuration_root_iri> }


   OPTIONAL{ 
    ?c1 base:hasIdentifier ?c1_id ;
      base:hasCanonicalName ?c1_name ;
  }
 	OPTIONAL {
		?c1_mass_mag vim4:characterizes ?c1 ;
			vim4:hasDoubleNumber ?c1_mass .
	} 
  OPTIONAL{
    ?c1 base:contains ?c2 ;
    OPTIONAL{
      ?c2 base:hasIdentifier ?c2_id ;
          base:hasCanonicalName ?c2_name .
    }
 	OPTIONAL {
		?c2_mass_mag vim4:characterizes ?c2 ;
			vim4:hasDoubleNumber ?c2_mass .
	}     
    OPTIONAL{
      ?c2 project:isSuppliedBy ?c3 ;
          OPTIONAL{
            ?c3 base:hasIdentifier ?c3_id ;
                base:hasCanonicalName ?c3_name;
                project:isAuthorizedBy ?c4 .
          }          
    }    
  }


  BIND(STRAFTER(STR(?c1), "#") AS ?c1_instancename) .
  BIND(STRAFTER(STR(?c2), "#") AS ?c2_instancename) .
  BIND(STRAFTER(STR(?c3), "#") AS ?c3_instancename) .
 }
ORDER BY ?c2_id

'
query_string <- str_replace(query_string, "\\$configuration_root_iri", configuration_root_iri)
```

### Query

```{r}
df_query <- send_query(endpoint_url,query_string)
```



## Orbiter Spacecraft System Configurations from OML model

### Tidy Data

```{r}
df_query$c1_type <- "component"

df_query <- df_query %>%
  mutate(c2_label = paste0(c2_id,": ",c2_instancename)) %>%
  mutate(c1_label = paste0(c1_id,": ",c1_instancename)) 

df_config <- df_query

# just for vis add NA to root
df_vis <- df_config %>%
  add_row(c1=NA,
          c1_instancename=NA,
          c1_id=NA,
          c1_name=NA,
          c1_mass=NA,
          c2=df_config$c1[1],
          c2_instancename=df_config$c1_instancename[1],
          c2_id=df_config$c1_id[1],
          c2_name=df_config$c1_name[1],
          c2_mass=df_config$c1_mass[1],
          c1_type=df_config$c1_type[1],
          c2_label=NA,
          c1_label=df_config$c1_label[1],  
          .before = 1)

plotCollapsibleTreeFromDataframe(df_vis, palette="BluYl", 
                                 parent="c2_label",
                                 child="c1_label",
                                 type="c2_id")

```

## SysML Diagram from MMS

## Load R wrapper to mms-python-client
```{r}
library(e9mmsradapter)
packageVersion("e9mmsradapter")
```

## mms configulations
```{r}
#| echo: false
mmsconfig <- data.frame(
  server = c('http://yourserverpath/mms4/'),
  projectID = c('PROJECT-ID'),
  refID = c('master'),
  username = c('mmsusername'),
  password = c('mmaspassword')
)
```


## Get Diagrams
```{r}
artifactID = "_19_0_4_420019d_1720223385603_104649_44455"
# you should create a ./img directory first
api_response <- get_diagram(mmsconfig, artifactID)
```


## Show Diagram
```{r}
library(magick)
im <- image_read(api_response$filepath)
print(im)
```



## Get All SysML Diagrams in View Editor

```{r}
df_api_response <- get_all_elements(mmsconfig)
df_all <- df_api_response

df_diagrams <- data.frame(
  row = numeric(),
  id = character(),
  name = character(),
  type = character(),
  diagramtype = character(),
  filepath = character()
)

pattern <- c("SysML Block Definition Diagram", 
             "Profile Diagram",
##             "Dependency Matrix",
             "Generic Table")

library(dplyr)
key.type = "Diagram"

for (i in 1:length(df_api_response$elements))
  if (df_api_response$elements[[i]]$type == key.type){
    if(any(df_api_response$elements[[i]]$`_diagramType` %in% pattern)){
      df_diagrams <- df_diagrams %>% add_row(
        row = i,
        id = df_api_response$elements[[i]]$id,
        name = df_api_response$elements[[i]]$name,
        type = df_api_response$elements[[i]]$type,
        diagramtype = df_api_response$elements[[i]]$`_diagramType`
      )
    }
  }
    
```

## get all diagrams as png

```{r}
# artifactIDにはダイアグラムのelementIDを指定
for ( i in 1:nrow(df_diagrams) ){
  artifactID = df_diagrams$id[i]
  # you should create a ./img directory first
  api_response <- get_diagram(mmsconfig, artifactID)
  df_diagrams$filepath[i] <- api_response$filepath
}
```


## View Image
```{r}
library(png)
library(grid)

# 画像ファイルが保存されているフォルダのパス
folder_path <- "./img"

# フォルダ内のすべてのPNGファイルを取得
image_files <- list.files(path = folder_path, pattern = "*.png", full.names = TRUE)

# すべての画像をプロット
for (image_file in image_files) {
  img <- readPNG(image_file)
  grid.newpage()
  grid.raster(img)
  title <- basename(image_file)
  grid.text(title, x = 0.5, y = 0.95, gp = gpar(fontsize = 20, col = "blue"))
}

```