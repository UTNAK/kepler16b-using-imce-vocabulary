orbit_init=r.df_parameters.initOrbit.values.tolist()[0]
orbit_target=r.df_parameters.targetOrbit.values.tolist()[0]
m_final=r.df_parameters.m_dry.values.tolist()[0]
I_sp=r.df_parameters.I_sp.values.tolist()[0]
# orbit_init=r.initOrbit
# orbit_target=r.targetOrbit
# m_init=1000
# I_sp=r.I_sp
import os
import sys
print('getcwd:      ', os.getcwd())
sys.path.append(os.getcwd())
sys.path.append(os.getcwd()+'/src/analysis')
# from src.analysis import analysisOrbit
import analysisOrbit
from astropy import units as u
analysisRocket = analysisOrbit.hohmanTransfer(orbit_init=orbit_init, orbit_target=orbit_target)
# analysisRocket = analysisOrbit.hohmanTransfer(orbit_init=r.initOrbit, orbit_target=r.targetOrbit, m_init=r.m_dry, I_sp=r.I_sp)
# analysisRocket = analysisOrbit.hohmanTransfer(orbit_init=400, orbit_target=35786, m_init=5000, I_sp=300)
total_delta_v = analysisRocket.calculate_delta_v()
print(f"Total delta-v: {total_delta_v}")
print(f"Required fuel mass: {analysisRocket.m_fuel}\n final: {analysisRocket.m_final}\n init: {analysisRocket.m_init}")
df = r.df_parameters2
df[df['parameter']=='I_sp'].value.values[0]
analysisRocket.calculate_init_mass(I_sp, m_final)
print(f"Total delta-v: {total_delta_v}")
print(f"Required fuel mass: {analysisRocket.m_fuel}\n final: {analysisRocket.m_final}\n init: {analysisRocket.m_init}")
orbit_init=r.df_parameters.initOrbit.values.tolist()[0]
orbit_target=r.df_parameters.targetOrbit.values.tolist()[0]
m_final=r.df_parameters.m_dry.values.tolist()[0]
I_sp=r.df_parameters.I_sp.values.tolist()[0]
# orbit_init=r.initOrbit
# orbit_target=r.targetOrbit
# m_init=1000
# I_sp=r.I_sp
import os
import sys
print('getcwd:      ', os.getcwd())
sys.path.append(os.getcwd())
sys.path.append(os.getcwd()+'/src/analysis')
# from src.analysis import analysisOrbit
import analysisOrbit
from astropy import units as u
analysisRocket = analysisOrbit.hohmanTransfer(orbit_init=orbit_init, orbit_target=orbit_target)
# analysisRocket = analysisOrbit.hohmanTransfer(orbit_init=r.initOrbit, orbit_target=r.targetOrbit, m_init=r.m_dry, I_sp=r.I_sp)
# analysisRocket = analysisOrbit.hohmanTransfer(orbit_init=400, orbit_target=35786, m_init=5000, I_sp=300)
total_delta_v = analysisRocket.calculate_delta_v()
print(f"Total delta-v: {total_delta_v}")
print(f"Required fuel mass: {analysisRocket.m_fuel}\n final: {analysisRocket.m_final}\n init: {analysisRocket.m_init}")
import os
print("PYTHONPATH:", os.environ.get('PYTHONPATH'))
print("PATH:", os.environ.get('PATH'))
from astropy import units as u
from poliastro.bodies import Earth
from poliastro.twobody import Orbit
from poliastro.maneuver import Maneuver
from poliastro.util import norm
import numpy as np
# Rocket parameters
g0 = 9.81 * u.m / u.s**2  # Standard gravity
# Initial Payload mass
m_init = 1000 * u.kg
I_sp = 350 * u.s  # Specific impulse
# Define the orbits
leo = Orbit.circular(Earth, alt=400 * u.km)
geo = Orbit.circular(Earth, alt=35786 * u.km)
# Calculate the Hohmann transfer maneuver
hohmann_maneuver = Maneuver.hohmann(leo, geo.a)
ss_a, ss_f = leo.apply_maneuver(hohmann_maneuver, intermediate=True)
print(f"Hohmann transfer maneuvers: {hohmann_maneuver.impulses}")
# Calculate the total delta-v
total_delta_v = sum(norm(dv) for (_, dv) in hohmann_maneuver.impulses)
print(f"Total delta-v: {total_delta_v}")
# total_delta_v = norm(hohmann_maneuver.impulses[1][1])
# print(f"Total delta-v: {total_delta_v}")
# Convert delta_v to a dimensionless value by dividing by the unit (m/s)
dimensionless_delta_v = total_delta_v.to(u.m / u.s).value
# Tsiolkovsky rocket equation
m_final = m_init / np.exp(dimensionless_delta_v / (I_sp * g0).value)
m_fuel = m_init - m_final
print(f"m_init: {m_init.to(u.kg)}")
print(f"m_final: {m_final.to(u.kg)}")
print(f"m_fuel: {m_fuel.to(u.kg)}")
m_init = 2000 * u.kg
dimensionless_delta_v = total_delta_v.to(u.m / u.s).value
m_final = m_init / np.exp(dimensionless_delta_v / (I_sp * g0).value)
m_fuel = m_init - m_final
print(f"m_init: {m_init.to(u.kg)}")
print(f"m_final: {m_final.to(u.kg)}")
print(f"m_fuel: {m_fuel.to(u.kg)}")
m_init = 3950 * u.kg
dimensionless_delta_v = 1900
# この２つは同じ結果が得られる式である
m_final = m_init / np.exp(dimensionless_delta_v / (220 * g0).value)
m_final = m_init * np.exp(-dimensionless_delta_v / (220 * g0).value)
m_fuel = m_init - m_final
print(f"m_init: {m_init.to(u.kg)}")
print(f"m_final: {m_final.to(u.kg)}")
print(f"m_fuel: {m_fuel.to(u.kg)}")
m_init = 1000 * u.kg
dimensionless_delta_v = 3300
m_final = m_init / np.exp(dimensionless_delta_v / (350 * g0).value)
m_fuel = m_init - m_final
print(f"m_init: {m_init.to(u.kg)}")
print(f"m_final: {m_final.to(u.kg)}")
print(f"m_fuel: {m_fuel.to(u.kg)}")
from poliastro.plotting import OrbitPlotter2D
op = OrbitPlotter2D()
# ss_a, ss_f = ss_i.apply_maneuver(hoh, intermediate=True)
op.plot(leo, label="Initial orbit")
op.plot(ss_a, label="Transfer orbit")
op.plot(geo, label="Final orbit")
# op.plot(ss_f, label="Final orbit-2")
import os
print("PYTHONPATH:", os.environ.get('PYTHONPATH'))
print("PATH:", os.environ.get('PATH'))
from astropy import units as u
from poliastro.bodies import Earth
from poliastro.twobody import Orbit
from poliastro.maneuver import Maneuver
from poliastro.util import norm
import numpy as np
# Rocket parameters
g0 = 9.81 * u.m / u.s**2  # Standard gravity
# Initial Payload mass
m_init = 1000 * u.kg
I_sp = 350 * u.s  # Specific impulse
# Define the orbits
leo = Orbit.circular(Earth, alt=400 * u.km)
geo = Orbit.circular(Earth, alt=35786 * u.km)
# Calculate the Hohmann transfer maneuver
hohmann_maneuver = Maneuver.hohmann(leo, geo.a)
ss_a, ss_f = leo.apply_maneuver(hohmann_maneuver, intermediate=True)
print(f"Hohmann transfer maneuvers: {hohmann_maneuver.impulses}")
# Calculate the total delta-v
total_delta_v = sum(norm(dv) for (_, dv) in hohmann_maneuver.impulses)
print(f"Total delta-v: {total_delta_v}")
# total_delta_v = norm(hohmann_maneuver.impulses[1][1])
# print(f"Total delta-v: {total_delta_v}")
# Convert delta_v to a dimensionless value by dividing by the unit (m/s)
dimensionless_delta_v = total_delta_v.to(u.m / u.s).value
# Tsiolkovsky rocket equation
m_final = m_init / np.exp(dimensionless_delta_v / (I_sp * g0).value)
m_fuel = m_init - m_final
print(f"m_init: {m_init.to(u.kg)}")
print(f"m_final: {m_final.to(u.kg)}")
print(f"m_fuel: {m_fuel.to(u.kg)}")
m_init = 2000 * u.kg
dimensionless_delta_v = total_delta_v.to(u.m / u.s).value
m_final = m_init / np.exp(dimensionless_delta_v / (I_sp * g0).value)
m_fuel = m_init - m_final
print(f"m_init: {m_init.to(u.kg)}")
print(f"m_final: {m_final.to(u.kg)}")
print(f"m_fuel: {m_fuel.to(u.kg)}")
m_init = 3950 * u.kg
dimensionless_delta_v = 1900
# この２つは同じ結果が得られる式である
m_final = m_init / np.exp(dimensionless_delta_v / (220 * g0).value)
m_final = m_init * np.exp(-dimensionless_delta_v / (220 * g0).value)
m_fuel = m_init - m_final
print(f"m_init: {m_init.to(u.kg)}")
print(f"m_final: {m_final.to(u.kg)}")
print(f"m_fuel: {m_fuel.to(u.kg)}")
m_init = 1000 * u.kg
dimensionless_delta_v = 3300
m_final = m_init / np.exp(dimensionless_delta_v / (350 * g0).value)
m_fuel = m_init - m_final
print(f"m_init: {m_init.to(u.kg)}")
print(f"m_final: {m_final.to(u.kg)}")
print(f"m_fuel: {m_fuel.to(u.kg)}")
from poliastro.plotting import OrbitPlotter2D
op = OrbitPlotter2D()
# ss_a, ss_f = ss_i.apply_maneuver(hoh, intermediate=True)
op.plot(leo, label="Initial orbit")
op.plot(ss_a, label="Transfer orbit")
op.plot(geo, label="Final orbit")
# op.plot(ss_f, label="Final orbit-2")
reticulate::repl_python()
