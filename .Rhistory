orbit_init=r.df_parameters.initOrbit.values.tolist()[0]
orbit_target=r.df_parameters.targetOrbit.values.tolist()[0]
m_init=r.df_parameters.m_dry.values.tolist()[0]
I_sp=r.df_parameters.I_sp.values.tolist()[0]
# orbit_init=r.initOrbit
# orbit_target=r.targetOrbit
# m_init=1000
# I_sp=r.I_sp
import os
import sys
print('getcwd:      ', os.getcwd())
# sys.path.append("..")
# total_delta_v = 3853.959363102248
import analysisOrbit
from astropy import units as u
analysisRocket = analysisOrbit.hohmanTransfer(orbit_init=orbit_init, orbit_target=orbit_target, m_init=m_init, I_sp=I_sp)
# analysisRocket = analysisOrbit.hohmanTransfer(orbit_init=r.initOrbit, orbit_target=r.targetOrbit, m_init=r.m_dry, I_sp=r.I_sp)
# analysisRocket = analysisOrbit.hohmanTransfer(orbit_init=400, orbit_target=35786, m_init=5000, I_sp=300)
total_delta_v = analysisRocket.calculate_delta_v()
print(f"Total delta-v: {total_delta_v}")
print(f"Required fuel mass: {analysisRocket.m_fuel}\n final: {analysisRocket.m_final}\n init: {analysisRocket.m_init}")
analysisRocket = analysisOrbit.hohmanTransfer(orbit_init=orbit_init, orbit_target=orbit_target)
total_delta_v = analysisRocket.calculate_delta_v()
print(f"Total delta-v: {total_delta_v}")
print(f"Required fuel mass: {analysisRocket.m_fuel}\n final: {analysisRocket.m_final}\n init: {analysisRocket.m_init}")
m_final=r.df_parameters.m_dry.values.tolist()[0]
analysisRocket.calculate_init_mass(m_final)
m_final=r.df_parameters.m_dry.values.tolist()[0]
analysisRocket.calculate_init_mass(I_sp, m_final)
print(f"Total delta-v: {total_delta_v}")
print(f"Required fuel mass: {analysisRocket.m_fuel}\n final: {analysisRocket.m_final}\n init: {analysisRocket.m_init}")
analysisRocket.calculate_init_mass(I_sp, m_final)
print(f"Total delta-v: {total_delta_v}")
print(f"Required fuel mass: {analysisRocket.m_fuel}\n final: {analysisRocket.m_final}\n init: {analysisRocket.m_init}")
datatable(datadf_parameters, options = list(autoWidth = TRUE, pageLength = -1), filter = list(
position = 'top', clear = FALSE
))
datatable(df_parameters, options = list(autoWidth = TRUE, pageLength = -1), filter = list(
position = 'top', clear = FALSE
))
datatable(df_parameters, options = list(autoWidth = TRUE, pageLength = -1), clear = FALSE)
datatable(df_parameters, options = list(autoWidth = TRUE, pageLength = -1))
df_table <- df_parameters %>% pivot_longer()
df_table <- df_parameters %>%
mutate(id=1) %>%
pivot_longer(id, names_to = "parameter")
View(df_table)
df_table <- df_parameters %>%
mutate(id=1)
View(df_table)
df_table <- df_parameters %>%
mutate(id=1)
df_table %>%
pivot_longer(id, names_to = "parameter", values_to = "cases")
df_table %>%
pivot_longer(!id, names_to = "parameter", values_to = "cases")
df_table <- df_parameters %>%
mutate(id=1)
df_table <- df_parameters %>%
mutate(id=1) %>%
pivot_longer(!id, names_to = "parameter", values_to = "value")
df_table <- df_parameters %>%
mutate(id=1) %>%
pivot_longer(!id, names_to = "parameter", values_to = "value") %>%
select(-id)
datatable(df_table, options = list(autoWidth = TRUE, pageLength = -1))
datatable(df_table, options = list(autoWidth = TRUE, pageLength = -1))
]
datatable(df_table, options = list(autoWidth = FALSE, pageLength = -1))
