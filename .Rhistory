import os
print("PYTHONPATH:", os.environ.get('PYTHONPATH'))
print("PATH:", os.environ.get('PATH'))
from astropy import units as u
from poliastro.bodies import Earth
from poliastro.twobody import Orbit
from poliastro.maneuver import Maneuver
from poliastro.util import norm
import numpy as np
# Rocket parameters
g0 = 9.81 * u.m / u.s**2  # Standard gravity
# Initial Payload mass
m_init = 1000 * u.kg
I_sp = 350 * u.s  # Specific impulse
# Define the orbits
leo = Orbit.circular(Earth, alt=400 * u.km)
geo = Orbit.circular(Earth, alt=35786 * u.km)
# Calculate the Hohmann transfer maneuver
hohmann_maneuver = Maneuver.hohmann(leo, geo.a)
ss_a, ss_f = leo.apply_maneuver(hohmann_maneuver, intermediate=True)
print(f"Hohmann transfer maneuvers: {hohmann_maneuver.impulses}")
# Calculate the total delta-v
total_delta_v = sum(norm(dv) for (_, dv) in hohmann_maneuver.impulses)
print(f"Total delta-v: {total_delta_v}")
# total_delta_v = norm(hohmann_maneuver.impulses[1][1])
# print(f"Total delta-v: {total_delta_v}")
Earth
from astropy import units as u
from poliastro.bodies import Earth
import os
print("PYTHONPATH:", os.environ.get('PYTHONPATH'))
print("PATH:", os.environ.get('PATH'))
import os
print("PYTHONPATH:", os.environ.get('PYTHONPATH'))
print("PATH:", os.environ.get('PATH'))
import os
print("PYTHONPATH:", os.environ.get('PYTHONPATH'))
print("PATH:", os.environ.get('PATH'))
from astropy import units as u
from poliastro.bodies import Earth
from poliastro.twobody import Orbit
from poliastro.maneuver import Maneuver
from poliastro.util import norm
import numpy as np
# Rocket parameters
g0 = 9.81 * u.m / u.s**2  # Standard gravity
# Initial Payload mass
m_init = 1000 * u.kg
I_sp = 350 * u.s  # Specific impulse
# Define the orbits
leo = Orbit.circular(Earth, alt=400 * u.km)
geo = Orbit.circular(Earth, alt=35786 * u.km)
# Calculate the Hohmann transfer maneuver
hohmann_maneuver = Maneuver.hohmann(leo, geo.a)
ss_a, ss_f = leo.apply_maneuver(hohmann_maneuver, intermediate=True)
print(f"Hohmann transfer maneuvers: {hohmann_maneuver.impulses}")
# Calculate the total delta-v
total_delta_v = sum(norm(dv) for (_, dv) in hohmann_maneuver.impulses)
print(f"Total delta-v: {total_delta_v}")
# total_delta_v = norm(hohmann_maneuver.impulses[1][1])
# print(f"Total delta-v: {total_delta_v}")
import os
print("PYTHONPATH:", os.environ.get('PYTHONPATH'))
print("PATH:", os.environ.get('PATH'))
reticulate::repl_python()
# 計算条件
GM <- 398600.4354360959 # 地球の重力定数, km3/s2
re <- 6378.1366 # 地球半径 km
initOrbit <- 400 # km
targetOrbit <- 35786 #km
rp <- re + initOrbit  # LEOの軌道半径, km
ra <- re + targetOrbit # GEOの軌道半径, km
# LEOの軌道速度とGEOの軌道速度
v_LEO <- sqrt(GM/rp) * sqrt(2*rp/(rp+rp)) # 円軌道なので近点半径・遠点半径共にrp
v_GEO <- sqrt(GM/ra) * sqrt(2*ra/(ra+ra)) # 円軌道なので近点半径・遠点半径共にra
# ホーマン遷移軌道の速度
vp = sqrt(GM/rp) * sqrt(2*ra/(rp+ra))
va = sqrt(GM/ra) * sqrt(2*rp/(rp+ra))
# ΔV計算
dv1 = vp-v_LEO
dv2 = v_GEO-va
print(c(dv1, dv2))
dv = dv1 + dv2
reticulate::repl_python()
reticulate::repl_python()
# 計算条件
GM <- 398600.4354360959 # 地球の重力定数, km3/s2
re <- 6378.1366 # 地球半径 km
initOrbit <- 400 # km
targetOrbit <- 35786 #km
rp <- re + initOrbit  # LEOの軌道半径, km
ra <- re + targetOrbit # GEOの軌道半径, km
# LEOの軌道速度とGEOの軌道速度
v_LEO <- sqrt(GM/rp) * sqrt(2*rp/(rp+rp)) # 円軌道なので近点半径・遠点半径共にrp
v_GEO <- sqrt(GM/ra) * sqrt(2*ra/(ra+ra)) # 円軌道なので近点半径・遠点半径共にra
# ホーマン遷移軌道の速度
vp = sqrt(GM/rp) * sqrt(2*ra/(rp+ra))
va = sqrt(GM/ra) * sqrt(2*rp/(rp+ra))
# ΔV計算
dv1 = vp-v_LEO
dv2 = v_GEO-va
print(c(dv1, dv2))
dv = dv1 + dv2
reticulate::repl_python()
